{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/ContactsList/ContactsList.module.css","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","redux/contacts/contacts-operations.js","components/Filter/Filter.js","components/ContactsList/ContactsList.js","pages/Contacts/Contacts.js"],"names":["module","exports","getContacts","state","contacts","items","getFilteredContacts","createSelector","filter","el","name","toLowerCase","includes","ContactForm","number","handleChange","e","setState","target","value","Form","className","style","form","onSubmit","preventDefault","props","every","addContact","id","shortid","generate","alert","reset","Group","controlId","Label","Control","onChange","this","type","placeholder","Button","addContactBtn","variant","Component","connect","dispatch","contact","a","ADDCONTACTREQUEST","axios","post","response","data","ADDCONTACTSUCCESS","ADDCONTACTERROR","filterChange","text","FILTERCHANGE","filterInput","title","ContactsList","componentDidMount","fetchContacts","deleteContact","ListGroup","contactsList","map","Item","contactsListItem","deleteButton","onClick","contactId","DELETECONTACTREQUEST","delete","DELETECONTACTSUCCESS","DELETECONTACTERROR","FETCHCONTACTREQUEST","get","FETCHCONTACTSUCCESS","FETCHCONTACTERROR","Contacts"],"mappings":"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","file":"static/js/5.d9d54e14.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2P4CC\",\"addContactBtn\":\"ContactForm_addContactBtn__8e5ov\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Filter_title__39Pu2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsList\":\"ContactsList_contactsList__1y0zO\",\"contactsListItem\":\"ContactsList_contactsListItem__1xHwH\",\"deleteButton\":\"ContactsList_deleteButton__3ozJb\"};","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport const getFilter = (state) => state.contacts.filter;\r\n\r\nexport const getContacts = (state) => state.contacts.items;\r\n\r\nexport const getFilteredContacts = createSelector(\r\n  [getFilter, getContacts],\r\n  (filter, contacts) =>\r\n    contacts.filter((el) => el.name.toLowerCase().includes(filter))\r\n);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\nimport shortid from \"shortid\";\r\nimport PropTypes from \"prop-types\";\r\nimport { addContact } from \"../../redux/contacts/contacts-operations\";\r\nimport { getContacts } from \"../../redux/contacts/contacts-selectors\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport style from \"./ContactForm.module.css\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n  handleChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n  render() {\r\n    return (\r\n      <Form\r\n        className={style.form}\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          if (\r\n            this.props.contacts.every(\r\n              (el) => el.name.toLowerCase() !== this.state.name.toLowerCase()\r\n            )\r\n          ) {\r\n            this.props.addContact({\r\n              id: shortid.generate(),\r\n              name: this.state.name,\r\n              number: this.state.number,\r\n            });\r\n          } else {\r\n            alert(`${this.state.name} is already in contacts.`);\r\n          }\r\n          e.target.reset();\r\n        }}\r\n      >\r\n        <Form.Group controlId=\"formBasicName\">\r\n          <Form.Label>Name</Form.Label>\r\n          <Form.Control\r\n            onChange={this.handleChange}\r\n            name=\"name\"\r\n            type=\"name\"\r\n            placeholder=\"Enter name\"\r\n          />\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formBasicPhone\">\r\n          <Form.Label>Phone number</Form.Label>\r\n          <Form.Control\r\n            onChange={this.handleChange}\r\n            name=\"number\"\r\n            type=\"tel\"\r\n            placeholder=\"Phone number\"\r\n          />\r\n        </Form.Group>\r\n        <Button className={style.addContactBtn} variant=\"primary\" type=\"submit\">\r\n          Add contact\r\n        </Button>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addContact: (contact) => dispatch(addContact(contact)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n\r\nContactForm.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string,\r\n      name: PropTypes.string,\r\n      number: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    })\r\n  ),\r\n  addContact: PropTypes.func,\r\n};\r\n","import axios from \"axios\";\r\nimport {\r\n  ADDCONTACTREQUEST,\r\n  ADDCONTACTSUCCESS,\r\n  ADDCONTACTERROR,\r\n  FETCHCONTACTREQUEST,\r\n  FETCHCONTACTERROR,\r\n  FETCHCONTACTSUCCESS,\r\n  DELETECONTACTREQUEST,\r\n  DELETECONTACTSUCCESS,\r\n  DELETECONTACTERROR,\r\n} from \"./contacts-actions\";\r\n\r\nexport const fetchContacts = () => async (dispatch) => {\r\n  dispatch(FETCHCONTACTREQUEST());\r\n  try {\r\n    const response = await axios.get(\"/contacts\");\r\n    const data = await response.data;\r\n\r\n    dispatch(FETCHCONTACTSUCCESS(data));\r\n  } catch (error) {\r\n    dispatch(FETCHCONTACTERROR(error));\r\n  }\r\n};\r\n\r\nexport const addContact = (contact) => async (dispatch) => {\r\n  dispatch(ADDCONTACTREQUEST());\r\n  try {\r\n    const response = await axios.post(\"/contacts\", contact);\r\n    const data = await response.data;\r\n\r\n    dispatch(ADDCONTACTSUCCESS(data));\r\n  } catch (error) {\r\n    dispatch(ADDCONTACTERROR(error));\r\n  }\r\n};\r\n\r\nexport const deleteContact = (id) => async (dispatch) => {\r\n  dispatch(DELETECONTACTREQUEST());\r\n  try {\r\n    await axios.delete(`/contacts/${id}`);\r\n    dispatch(DELETECONTACTSUCCESS(id));\r\n  } catch (error) {\r\n    dispatch(DELETECONTACTERROR(error));\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport shortid from \"shortid\";\r\nimport PropTypes from \"prop-types\";\r\nimport { FILTERCHANGE } from \"../../redux/contacts/contacts-actions\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport style from \"./Filter.module.css\";\r\n\r\nconst Filter = ({ filterChange }) => {\r\n  const filterInput = shortid.generate();\r\n  return (\r\n    <Form.Group>\r\n      <Form.Label className={style.title}>Find contacts by name</Form.Label>\r\n      <Form.Control\r\n        id={filterInput}\r\n        type=\"text\"\r\n        onChange={(e) => {\r\n          filterChange(e.target.value.toLowerCase());\r\n        }}\r\n        name=\"filter\"\r\n      ></Form.Control>\r\n    </Form.Group>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  filterChange: (text) => dispatch(FILTERCHANGE(text)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Filter);\r\n\r\nFilter.propTypes = {\r\n  filterChange: PropTypes.func,\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { ListGroup, Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  fetchContacts,\r\n  deleteContact,\r\n} from \"../../redux/contacts/contacts-operations\";\r\nimport { getFilteredContacts } from \"../../redux/contacts/contacts-selectors\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport style from \"./ContactsList.module.css\";\r\n\r\nclass ContactsList extends Component {\r\n  componentDidMount = () => {\r\n    const { fetchContacts } = this.props;\r\n    fetchContacts();\r\n  };\r\n  render() {\r\n    const { contacts, deleteContact } = this.props;\r\n    return (\r\n      <ListGroup className={style.contactsList}>\r\n        {contacts.map((el) => {\r\n          return (\r\n            <ListGroup.Item className={style.contactsListItem} key={el.id}>\r\n              <p>\r\n                {el.name} : {el.number}\r\n              </p>\r\n              <Button\r\n                className={style.deleteButton}\r\n                variant=\"primary\"\r\n                onClick={() => deleteContact(el.id)}\r\n              >\r\n                Delete\r\n              </Button>\r\n            </ListGroup.Item>\r\n          );\r\n        })}\r\n      </ListGroup>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: getFilteredContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  deleteContact: (contactId) => dispatch(deleteContact(contactId)),\r\n  fetchContacts: () => dispatch(fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string,\r\n      name: PropTypes.string,\r\n      number: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    })\r\n  ),\r\n  deleteContact: PropTypes.func,\r\n  fetchContact: PropTypes.func,\r\n};\r\n","import React from \"react\";\r\nimport ContactForm from \"../../components/ContactForm/ContactForm\";\r\nimport Filter from \"../../components/Filter/Filter\";\r\nimport ContactsList from \"../../components/ContactsList/ContactsList\";\r\n\r\nconst Contacts = () => {\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <h2>Phonebook</h2>\r\n      <ContactForm />\r\n      <h2 className=\"contactsTitle\">Contacts</h2>\r\n      <Filter />\r\n      <ContactsList />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Contacts;\r\n"],"sourceRoot":""}